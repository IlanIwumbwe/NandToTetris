/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
    field Array string;
    field int length;
    field int maxL;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength){ 
        let length = 0;
        if (maxLength = 0){
            let maxLength = 1;
        }
        let string = Array.new(maxLength);
        let maxL = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(string);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < maxL){
            let string[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let length = length - 1;
        }

        return;
    }

    method boolean isDigit(char c){
        return ~(c < 48) & ~(c > 57);
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int number;
        var boolean isNeg;
        var int i;

        let number = 0;

        if((string[0] = "-") & (length > 0)){
            let isNeg = true;
            let i = 1;
        } else {
            let isNeg = false;
            let i = 0;
        }

        while((i < length) & isDigit(string[i])){
            let number = (number * 10) + (string[i]-48)
            let i = i + 1;
        }

        if (isNeg){
            return -number;
        } else {
            return number;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0; // clear the string

        if (val < 0){
            let val = -val; // make positive
            do appendChar(45); // add '-' at the front of number
        }

        do recSetInt(val);

        return;
    }

    method void recSetInt(int val){
        var int nextDigit;
        var int lastDigit;
        var int charLastDigit;

        let nextDigit = val / 10;
        let lastDigit = val - (nextDigit*10);
        let charLastDigit = lastDigit + 48;

        if (val < 10){
            do appendChar(charLastDigit);
        } else {
            do recSetInt(nextDigit);
            do appendChar(charLastDigit);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
