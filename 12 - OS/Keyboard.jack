/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int KEYBOARD_ADDRESS, LINE_LENGTH;

    /** Initializes the keyboard. */
    function void init() {
        let KEYBOARD_ADDRESS = 24576;
        let LINE_LENGTH = 64;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(KEYBOARD_ADDRESS);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key;

        while(key = 0){
            let key = Keyboard.keyPressed();
        }
    
        while(~(Keyboard.keyPressed() = 0)){}

        return key;
    }

    function String _readLine(String message, boolean onlyDigits){
        var String str;
        var char key;
        let str = String.new(LINE_LENGTH);

        do Output.printString(message);

        while(~(key = String.newLine()) & ~(str.length() > LINE_LENGTH)){
            if (key = String.backSpace()){
                do Output.backSpace();
                do Output.printChar(32);
                do Output.backSpace();
                do str.eraseLastChar();
            } else {
                if ((~onlyDigits) | ((key > 47) & (key < 58))){
                    do str.appendChar(key);
                    do Output.printChar(key);
                } else {
                    // if only digits are expected and the first character is a negative
                    if ((str.length() = 0) & (key = 45)){
                        do str.appendChar(key);
                        do Output.printChar(key);
                    }
                }
            }

            let key = Keyboard.readChar();
        }

        do Output.println();

        return str;
    }   
    
    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {

        return Keyboard._readLine(message, false);
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String str;
        let str = Keyboard._readLine(message, true);

        while(str.length() = 0){
            let str = Keyboard._readLine(message, true);   
        }
        
        return str.intValue();
    }
}
